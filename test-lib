# This line:
# - aborts the script after any pipeline returns nonzero (e)
# - shows all commands as they are run (x)
# - sets any dereference of an unset variable to trigger an error (u)
# - enables job control (m)
# - causes the return value of a pipeline to be the nonzero return value
#   of the furthest right failing command or zero if no command failed (o pipefail)
set -exumo pipefail

PODMAN=${PODMAN:-podman}
PODMAN_COMPOSE=${PODMAN_COMPOSE:-podman-compose}
SCRIPT_DIR=$(dirname "$(readlink -f "$0")")
WORKDIR=$(mktemp -d)

PINP_CONFIG='-c user.name=PINP -c user.email=podman@podman'

HOSTNAME_FROM_DOTENV="$(sh -c '
set -o allexport
. ./.env
exec jq -r -n "env.SINGULARITY_HOSTNAME"
')"

SINGULARITY_HOSTNAME=${SINGULARITY_HOSTNAME:-"${HOSTNAME_FROM_DOTENV}"}

setup_testdir() {
	# Create test dir if it does not exist yet
	mkdir -p test

	# Reset the test directory
	rm -f test/*

	# put the cert in there
	${PODMAN} cp singularity_nginx_1:/etc/ssl/nginx/fullchain.pem test/ca_cert.pem
}

CURL_OPTS=( \
--verbose \
--cacert test/ca_cert.pem \
--fail \
--no-progress-meter \
)


get_git_port() { pushd "$SCRIPT_DIR" > /dev/null ; podman-compose port git 8000 ; popd > /dev/null ; } ;

# preconditions:
# - SCRIPT_DIR defined (singularity repo root)
# - WORKDIR defined (arbitrary) temp directory
setup_submissions_and_grading_repo() {
	pushd "$SCRIPT_DIR"
	# crete and push fresh submissions repo
	rm -rf repos/submissions
	git/admin.sh submissions "course submissions repository"
	pushd repos
	git init --bare submissions
	echo "course submissions repository" > submissions/description
	# create a temporary workdir to push an initial commit to the submission repo
	git init submissions_init
	pushd submissions_init
	echo "# submissions" > README.md
	git add README.md
	git status
	git -c user.name=singularity -c user.email=singularity@singularity commit -sm 'init submissions repo'
	git push ../submissions master
	popd
	rm -rf submissions_init
	pushd submissions
	git push --mirror http://localhost:"$(get_git_port)"/cgi-bin/git-receive-pack/submissions
	popd
	popd
	popd

	pushd "$WORKDIR"
	mkdir certs
	pushd certs
	${PODMAN} volume export singularity_ssl-certs > certs.tar
	tar xf certs.tar
	popd
	git clone http://localhost:"$(get_git_port)"/submissions
	popd
}

# create or recreate dummy assignment
create_dummy_assignment() {
	test -n "$1"
	local asn="$1"

	pushd "$SCRIPT_DIR"
	if denis/configure.sh dump | grep -q "^$asn:"; then
		denis/configure.sh remove -a "$asn"
	fi
	denis/configure.sh dummy -a "$asn"
	popd
}

# create or recreate dummy assignment
trigger_deadline() {
	test -n "$1"
	test -n "$2"
	local asn="$1"
	local cmp="$2"

	pushd "$SCRIPT_DIR"
	denis/configure.sh trigger -a "$asn" -c "$cmp"
	if [ "$cmp" == "peer" ]; then
		cmp="$cmp review"
	fi
	podman-compose logs -f denis | ( sed "/completed $asn assignment processing for $cmp submission deadline/ q" && kill 0 ) || true
	popd
}

# preconditions:
# - called after setup_submissions_and_grading_repo
setup_submissions_for() {
	test -n "$1"
	local user="$1"

	pushd "$SCRIPT_DIR"
	orbit/warpdrive.sh -u "$user" -f "$user" -p builder -n || orbit/warpdrive.sh -u "$user" -f "$user" -p builder -m
	popd

	pushd "$WORKDIR"/submissions
	git config user.name "$user"
	git config user.email "$user"@localhost.localdomain
	git config sendemail.smtpUser "$user"
	git config sendemail.smtpPass builder
	git config sendemail.smtpserver localhost.localdomain
	git config sendemail.smtpserverport 1465
	git config sendemail.smtpencryption ssl
	popd
}

# preconditions:
# - no non-tracked files in submissions repo
# - called after setup_submissions_for
enter_and_checkout() {
	test -n "$1"
	local branch="$1"

	pushd "$WORKDIR"/submissions
	git checkout --orphan "$1"
	if [ -n "$(ls)" ]
	then
		git rm -rf ./*
	fi
}

# preconditions:
# - called after a call to enter_and_checkout
exit_after_sending() {
	test -n "$1"
	local asn="$1"

	git send-email \
		--confirm=never \
		--smtp-ssl-cert-path="$WORKDIR"/certs/fullchain.pem \
		--to "$asn"@localhost.localdomain \
		./*.patch | tee "$WORKDIR"/last_email
	last_id=$(grep -m 1 "Message-ID" "$WORKDIR"/last_email)
	rm ./*.patch
	popd
	podman-compose logs -f mailman | ( sed "/finished processing $last_id/ q" && kill 0 ) || true
}

# preconditions:
# - called after a call to enter_and_checkout
write_commit_to() {
	test -n "$1" && test -n "$2"
	local content="$1"
	local file="$2"
	set +u # necessary since $3 is unbound in 2 arg case
	local opt="$3"
	set -x

	mkdir -p $(dirname "$file")

	if [ "$opt" == "append" ]; then
		echo "$content" >> "$file"
	else
		echo "$content" > "$file"
	fi

	git add "$file"
	git commit -sm "add $content to $file"
}

# preconditions:
# - called after a call to write_commit_to
fixup_cover() {
	test -n "$1"
	sed -i "s/\*\*\* SUBJECT HERE \*\*\*/$1/g" *0000-cover-letter.patch
	sed -i "s/\*\*\* BLURB HERE \*\*\*/$1/g" *0000-cover-letter.patch
	sed -i "\$a\\Signed-off-by: $(git config user.name) <$(git config user.email)>" *0000-cover-letter.patch
}

